service: website-location-service

provider:
  name: aws
  runtime: nodejs4.3
  stage: dev
  region: us-east-1
  # serverless-offline doesn't support function scoped variables
  environment:
    LOCATION_TABLE: ${self:custom.table.locations}
    NODE_ENV: ${self:custom.env.${opt:stage, self:provider.stage}}
    UPDATE_USER: ${env:YO_UPDATE_USER}
  cfLogs: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

resources:
  Resources:
    locationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.table.locations}
        KeySchema:
          - AttributeName: createdDate
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: createdDate
            AttributeType: N
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

functions:
  getLocation:
    name: ${self:service}-get-handler
    handler: getLocation.handler
    events:
      - http: GET get
  updateLocation:
    name: ${self:service}-update-handler
    handler: updateLocation.handler
    events:
      - http: GET update

plugins:
  - serverless-build-plugin
  - serverless-dynamodb-local
  - serverless-mocha-plugin
  - serverless-offline

custom:
  # variables
  env:
    dev: development
    prod: production
  table:
    locations: ${self:service}-${opt:stage, self:provider.stage}-locations
  # serverless-dynamodb-local
  dynamodb:
    start:
      migration: true
  # serverless-build-plugin
  build:
    deploy: true
    modules:
      exclude:
        - aws-sdk
    method: bundle
    babel: true
    babili: true
    sourceMaps: false
    include:
      - lib.js
    functions:
      getLocation:
        include:
          - getLocation.js
      updateLocation:
        include:
          - updateLocation.js
