'use strict';

// tests for updateLocation
// Generated by serverless-mocha-plugin

const mod = require('../updateLocation.js');
const mochaPlugin = require('serverless-mocha-plugin');

const lambdaWrapper = mochaPlugin.lambdaWrapper;
const expect = mochaPlugin.chai.expect;
const wrapped = lambdaWrapper.wrap(mod, { handler: 'handler' });

describe('updateLocation', () => {
  it('empty params results in 400', () =>
    wrapped.run({
      queryStringParameters: {}
    }).then(res => {
      expect(res.statusCode).to.be.equal(400);
    })
  );
  it('invalid params results in 400', () => {
    const payloads = [{
      hello: 'world'
    }, {
      username: ''
    }, {
      location: ''
    }];
    payloads.forEach(params => {
      wrapped.run({
        queryStringParameters: params
      }).then(res => expect(res.statusCode).to.be.equal(400));
    });
  });
  it('invalid username results in 403', () => {
    const payloads = [{
      username: '',
      location: ''
    }, {
      username: '00000',
      location: ''
    }, {
      username: '12345',
      location: ''
    }, {
      username: '77777',
      location: ''
    }, {
      username: 'null',
      location: ''
    }];
    payloads.forEach(params => {
      wrapped.run({
        queryStringParameters: params
      }).then(res => expect(res.statusCode).to.be.equal(403));
    });
  });
  it('invalid location results in 400', () => {
    const payloads = [{
      location: ''
    }, {
      location: 'a string'
    }, {
      location: 'thirty-five;sixty'
    }, {
      location: '1;2;3'
    }];
    payloads.forEach(params => {
      params.username = process.env.UPDATE_USER;
      wrapped.run({
        queryStringParameters: params
      }).then(res => expect(res.statusCode).to.be.equal(400));
    });
  });
});
