'use strict';

import AWS from 'aws-sdk-mock';
import mochaPlugin from 'serverless-mocha-plugin';

// Generated by serverless-mocha-plugin
const mod = require('../getLocation');
const lambdaWrapper = mochaPlugin.lambdaWrapper;
const expect = mochaPlugin.chai.expect;
const wrapped = lambdaWrapper.wrap(mod, { handler: 'handler' });

// dummy data
const DUMMY = {
  justRight: {
    Count: 1,
    Items: [{
      message: 'hello world'
    }]
  },
  tooBig: {
    Count: 3,
    Items: [{
      place: 'first'
    }, {
      place: 'second'
    }, {
      place: 'third'
    }]
  },
  tooSmall: {
    Count: 0,
    Items: []
  }
};
// for convenience
const DOC_CLIENT = 'DynamoDB.DocumentClient';

// tests for getLocation
describe('getLocation', () => {
  describe('dynamo query', () => {
    before('set IS_TEST environment variable', done => {
      process.env.IS_TEST = true;
      done();
    });
    afterEach('remove aws mocks', done => {
      AWS.restore(DOC_CLIENT);
      done();
    });
    it('should return 500 when query returns too many items', () => {
      AWS.mock(DOC_CLIENT, 'query', (_, cb) => cb(null, DUMMY.tooBig));
      return wrapped.run().then(res => expect(res.statusCode).to.be.equal(500));
    });
    it('should return 500 when query returns no items', () => {
      AWS.mock(DOC_CLIENT, 'query', (_, cb) => cb(null, DUMMY.tooSmall));
      return wrapped.run().then(res => expect(res.statusCode).to.be.equal(500));
    });
    it('should return 200 when query returns a single item', () => {
      AWS.mock(DOC_CLIENT, 'query', (_, cb) => cb(null, DUMMY.justRight));
      return wrapped.run().then(res => expect(res.statusCode).to.be.equal(200));
    });
  });
});
