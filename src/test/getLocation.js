'use strict';

import AWS from 'aws-sdk-mock';
import mochaPlugin from 'serverless-mocha-plugin';

// Generated by serverless-mocha-plugin
const mod = require('../getLocation');
const lambdaWrapper = mochaPlugin.lambdaWrapper;
const expect = mochaPlugin.chai.expect;
const wrapped = lambdaWrapper.wrap(mod, { handler: 'handler' });

// dummy data
// too big
const D1 = {
  Count: 3,
  Items: [{
    place: 'first'
  }, {
    place: 'second'
  }, {
    place: 'third'
  }]
};
// just right
const D2 = {
  Count: 1,
  Items: [{
    message: 'hello world'
  }]
};
// too small
const D3 = {
  Count: 0,
  Items: {}
};

// tests for getLocation
describe('getLocation', () => {

  before(done => {
    // set IS_TEST environment variable
    process.env.IS_TEST = true;
    done();
  });

  afterEach(done => {
    // remove mocks on DyanmoDB.DocumentClient
    AWS.restore('DynamoDB.DocumentClient');
    done();
  });

  it('query returning single item results in 200', () => {
    AWS.mock('DynamoDB.DocumentClient', 'query', (_, cb) => cb(null, D2));
    wrapped.run().then(res => expect(res.statusCode).to.be.equal(200));
  });

  it('query returning multiple items uses first item in list', () => {
    AWS.mock('DynamoDB.DocumentClient', 'query', (_, cb) => cb(null, D1));
    wrapped.run().then(res => {
      expect(res.statusCode).to.be.equal(200);
      expect(res.body).to.be.equal(JSON.stringify({ message: D1.Items[0] }));
    });
  });

  it('query returning no items results in 500', () => {
    AWS.mock('DynamoDB.DocumentClient', 'query', (_, cb) => cb(null, D3));
    wrapped.run().then(res => expect(res.statusCode).to.be.equal(500));
  });

});
